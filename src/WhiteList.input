# Classes and methods listed here will be implemented if possible

# Following list is coming from the "proto" work


    QTimer
    QHBoxLayout
    QVBoxLayout
    QTextEdit

    QPushButton
	QPushButton::ctor(const QString&, QWidget*)
	QPushButton::setMenu(QMenu*)

	QAbstractButton::clicked(bool)
    QAbstractButton::pressed()
	QAbstractButton::setText(const QString&)
	QAbstractButton::text()
	QAbstractButton::click()
	QAbstractButton::isCheckable()
	QAbstractButton::isChecked()
	QAbstractButton::isDown()
	QAbstractButton::released()
	QAbstractButton::setAutoExclusive(bool)
	QAbstractButton::setCheckable(bool)
	QAbstractButton::setChecked(bool)
	QAbstractButton::setDown(bool)
	QAbstractButton::toggle()
	QAbstractButton::toggled(bool)


#	QApplication::exec()                # Special case
    QGuiApplication                     # For quit() in QApplication
    QCoreApplication::quit()            # For quit() in QApplication

	QTextEdit::ctor(QWidget*)
    QTextEdit::toPlainText()
	QTextEdit::setPlainText(const QString&)
	QTextEdit::setReadOnly(bool)
	QTextEdit::textChanged()
	
    QLayout::addWidget(QWidget*)
    QBoxLayout::addLayout(QLayout*, int)
	QLayout::setAlignment(QWidget*, Qt::Alignment)
	QLayout::setAlignment(QLayout*, Qt::Alignment)
	QLayout::setContentsMargins(int, int, int, int)


    QVBoxLayout::ctor()
    QHBoxLayout::ctor()

    QTimer::ctor(QObject*)
    QTimer::start()
    QTimer::stop()
    QTimer::timeout()
    QTimer::setInterval(int)

	QWidget::ctor(QWidget*, Qt::WindowFlags)
    QWidget::setLayout(QLayout*)
    QWidget::setWindowTitle(const QString&)
    QWidget::show()
    QWidget::setDisabled(bool)
    QWidget::setToolTip(const QString&)

	QWidget::font()
	QWidget::setFont(const QFont&)

    QWidget::setFixedHeight(int)
	QWidget::setFixedSize(int, int)
	QWidget::setFixedWidth(int)
	QWidget::setMinimumSize(int, int)
	QWidget::setMaximumHeight(int)
	QWidget::setMaximumSize(int, int)
	QWidget::setMaximumWidth(int)
	QWidget::setMinimumHeight(int)
	QWidget::setMinimumWidth(int)
	QWidget::update()
	QWidget::update(int, int, int, int)

    QWidget::enterEvent(QEvent*)
    QWidget::leaveEvent(QEvent*)
    QWidget::mouseMoveEvent(QMouseEvent*)
    QWidget::mousePressEvent(QMouseEvent*)
    QWidget::mouseReleaseEvent(QMouseEvent*)
    QWidget::paintEvent(QPaintEvent*)
	QWidget::closeEvent(QCloseEvent*)
	
	QWidget::setFocus()
	QWidget::setFocus(Qt::FocusReason)
	QWidget::setFocusPolicy(Qt::FocusPolicy)
	QWidget::activateWindow()
	QWidget::isActiveWindow()
	
	QWidget::height()
	QWidget::width()
	
	# For test
	 QWidget::render(QPaintDevice*, const QPoint&, const QRegion&, RenderFlags)
	# QWidget::grab(const QRect&)
	
    QWidget::mapFrom(const QWidget*, const QPoint&)
	QWidget::mapFromGlobal(const QPoint&)
	QWidget::mapFromParent(const QPoint&)
	QWidget::mapTo(const QWidget*, const QPoint&)
	QWidget::mapToGlobal(const QPoint&)
	QWidget::mapToParent(const QPoint&)

    QPoint::ctor()
    QPoint::ctor(int, int)
    QPoint::x()
    QPoint::y()
    QPoint::setX(int)
    QPoint::setY(int)
	QPoint::isNull()
	QPoint::manhattanLength()

	QPointF::ctor()
	QPointF::ctor(const QPoint&)
	QPointF::ctor(qreal, qreal)
	QPointF::isNull()
	QPointF::manhattanLength()
	QPointF::setX(qreal)
	QPointF::setY(qreal)
	QPointF::x()
	QPointF::y()
	
	QRegion::ctor()

	QMouseEvent::x()
	QMouseEvent::y()
	QMouseEvent::button()
	# QMouseEvent::buttons()   # returns Qt:MouseButtons       ==> Non traite pour le moment
	# QMouseEvent::flags()     # returns Qt::MouseEventFlags   ==> Non traite pour le moments

	# Pour test
	QMouseEvent::ctor(Type, const QPointF&, Qt::MouseButton, Qt::MouseButtons, Qt::KeyboardModifiers)
	QMouseEvent::ctor(Type, const QPointF&, const QPointF&, Qt::MouseButton, Qt::MouseButtons, Qt::KeyboardModifiers)
	QMouseEvent::ctor(Type, const QPointF&, const QPointF&, const QPointF&, Qt::MouseButton, Qt::MouseButtons, Qt::KeyboardModifiers)
	QMouseEvent::ctor(Type, const QPointF&, const QPointF&, const QPointF&, Qt::MouseButton, Qt::MouseButtons, Qt::KeyboardModifiers, Qt::MouseEventSource)


    QEvent::ctor(Type)
 	QEvent::ctor(const QEvent&)
    QEvent::spontaneous()
    QEvent::type()
	QEvent::accept()
	QEvent::ignore()
	QEvent::isAccepted()

	# Pour test
	QCoreApplication::sendEvent(QObject*, QEvent*)

	# New

	QImage::ctor(int, int, Format)
	QImage::fill(const QColor&)
	QImage::height()
	QImage::width()
	QImage::pixelColor(int, int)
	
	QColor::ctor(Qt::GlobalColor)
	QColor::ctor(int, int, int, int)

	# QColor::ctor(char*)   # Doesn't work !   Why ???

	QColor::red();
	QColor::green();
	QColor::blue();
	QColor::alpha();

	QPainter::ctor()
	QPainter::ctor(QPaintDevice*)
	QPainter::begin(QPaintDevice*)
	QPainter::end()
	QPainter::save()
	QPainter::restore()
	QPainter::drawEllipse(int, int, int, int)
	QPainter::drawLine(int, int, int, int)
	QPainter::drawRect(int, int, int, int)
	QPainter::setBrush(const QBrush&)
	QPainter::setPen(const QColor&)
	QPainter::setPen(const QPen&)
	QPainter::setPen(Qt::PenStyle)
	
	### To be tested !!!
    QPainter::drawText(const QRect&, int, const QString&, QRect*)
	QPainter::drawText(int, int, const QString&)
	QPainter::setFont(const QFont&)
    QPainter::drawRect(const QRect&)
	
	QBrush::ctor()
	QBrush::ctor(Qt::BrushStyle)
	QBrush::ctor(const QColor&, Qt::BrushStyle)
	QBrush::setColor(const QColor&)
	QBrush::setStyle(Qt::BrushStyle)

	QPen::ctor()
	QPen::ctor(Qt::PenStyle)
	QPen::ctor(const QColor&)
	QPen::setBrush(const QBrush&)
	QPen::setColor(const QColor&)
	QPen::setWidth(int)

	QPaintEvent::ctor(const QRect&)
	QPaintEvent::rect()

	QRect::ctor()
	QRect::ctor(const QPoint&, const QPoint&)
	QRect::ctor(int, int, int, int)

	QRect::width()
	QRect::height()
	QRect::x()
	QRect::y()

    QAction::ctor(QObject*)
    QAction::trigger()
	QAction::triggered(bool)
	QAction::setDisabled(bool)
	QAction::setEnabled(bool)
	QAction::text()

	QMenu::ctor(QWidget*)
	QMenu::ctor(const QString&, QWidget*)
	QMenu::exec()
    QMenu::exec(const QPoint&, QAction*)
	QMenu::addAction(const QString&)
	# QMenu::addAction(const QString&, const QObject*, const char*, const QKeySequence&)

	QLabel::ctor(QWidget*, Qt::WindowFlags)
	QLabel::ctor(const QString&, QWidget*, Qt::WindowFlags)
	QLabel::clear()
    QLabel::setAlignment(Qt::Alignment)
	QLabel::setMargin(int)
	QLabel::setText(const QString&)
	QLabel::setTextFormat(Qt::TextFormat)
   	QLabel::text()

	QLineEdit::ctor(QWidget*)
	QLineEdit::ctor(const QString&, QWidget*)
	QLineEdit::clear()
	QLineEdit::setAlignment(Qt::Alignment)
	QLineEdit::setText(const QString&)
	QLineEdit::text()
	QLineEdit::editingFinished()
	QLineEdit::returnPressed()

	QFont::pointSize()
	QFont::setPointSize(int)
	QFont::ctor()
	QFont::setFamily(const QString&)
	QFont::italic()
    QFont::setItalic(bool)
	QFont::bold()
    QFont::setBold(bool)
    
	QFont::stretch()
	QFont::setStretch(int)

# Version 0.0.3

	QResizeEvent::ctor(const QSize&, const QSize&)
	QResizeEvent::oldSize()
	QResizeEvent::size()

	QSize::boundedTo(const QSize&)
	QSize::ctor()
	QSize::ctor(int, int)
	QSize::expandedTo(const QSize&)
	QSize::height()
	QSize::isEmpty()
	QSize::isNull()
	QSize::isValid()
	QSize::setHeight(int)
	QSize::setWidth(int)
    QSize::width()
    
	QWidget::resizeEvent(QResizeEvent*)
	
	
	QFileDialog::getOpenFileName(QWidget*, const QString&, const QString&, const QString&, QString*, Options)
	QFileDialog::getSaveFileName(QWidget*, const QString&, const QString&, const QString&, QString*, Options)	
	
    QDialog::exec()
	
	QMessageBox::ctor(QWidget*)
	QMessageBox::setInformativeText(const QString&)
	QMessageBox::setStandardButtons(StandardButtons)
	QMessageBox::setText(const QString&)

	


# Version 0.0.5

	#          AbstractSlider
	QAbstractSlider::hasTracking()
	QAbstractSlider::invertedAppearance()
	QAbstractSlider::invertedControls()
	QAbstractSlider::maximum()
	QAbstractSlider::minimum()
	QAbstractSlider::orientation()
	QAbstractSlider::pageStep()
	QAbstractSlider::setMaximum(int)
	QAbstractSlider::setMinimum(int)
	QAbstractSlider::setOrientation(Qt::Orientation)
	QAbstractSlider::setPageStep(int)
	QAbstractSlider::setRange(int, int)
### QAbstractSlider::setRepeatAction(SliderAction, int, int)
	QAbstractSlider::setSingleStep(int)
	QAbstractSlider::setSliderDown(bool)
	QAbstractSlider::setSliderPosition(int)
	QAbstractSlider::setInvertedAppearance(bool)
	QAbstractSlider::setInvertedControls(bool)
	QAbstractSlider::setTracking(bool)
	QAbstractSlider::setValue(int)
	QAbstractSlider::singleStep()
	QAbstractSlider::value()
	QAbstractSlider::valueChanged(int)
	QAbstractSlider::sliderMoved(int)
	QAbstractSlider::sliderPosition()
	QAbstractSlider::sliderPressed()
	QAbstractSlider::sliderReleased()
	
	
	#          Slider
	QSlider::ctor(QWidget*)
	QSlider::ctor(Qt::Orientation, QWidget*)
	QSlider::setTickInterval(int)
	QSlider::setTickPosition(TickPosition)
	QSlider::tickInterval()
	QSlider::tickPosition()
	
	#          CheckBox
	QCheckBox::checkState()
	QCheckBox::ctor(QWidget*)
	QCheckBox::ctor(const QString&, QWidget*)
	QCheckBox::isTristate()
	QCheckBox::setCheckState(Qt::CheckState)
	QCheckBox::setTristate(bool)
	QCheckBox::stateChanged(int)
	
	
	#          RadioButton
	QRadioButton::ctor(QWidget*)
	QRadioButton::ctor(const QString&, QWidget*)

	
	#          GroupBox
### QGroupBox::alignment()
	QGroupBox::clicked(bool)
	QGroupBox::ctor(QWidget*)
	QGroupBox::ctor(const QString&, QWidget*)
	QGroupBox::isCheckable()
	QGroupBox::isChecked()
	QGroupBox::isFlat()
	QGroupBox::setAlignment(int)
	QGroupBox::setCheckable(bool)
	QGroupBox::setChecked(bool)
	QGroupBox::setFlat(bool)
	QGroupBox::setTitle(const QString&)
	QGroupBox::title()
	QGroupBox::toggled(bool)

	
	#          Dial
	QDial::ctor(QWidget*)
	QDial::notchSize()
	QDial::notchTarget()
	QDial::notchesVisible()
	QDial::setNotchTarget(double)
	QDial::setNotchesVisible(bool)
	QDial::setWrapping(bool)
	QDial::wrapping()


# Version 0.0.6
	
    #     GridLayout
    QGridLayout::ctor(QWidget*)
    QGridLayout::ctor()

    QGridLayout::addLayout(QLayout*, int, int, Qt::Alignment)
    QGridLayout::addLayout(QLayout*, int, int, int, int, Qt::Alignment)
    QGridLayout::addWidget(QWidget*, int, int, Qt::Alignment)
    QGridLayout::addWidget(QWidget*, int, int, int, int, Qt::Alignment)

    QGridLayout::cellRect(int, int)
    QGridLayout::columnCount()
    QGridLayout::columnMinimumWidth(int)
    QGridLayout::columnStretch(int)
    QGridLayout::setColumnMinimumWidth(int, int)
    QGridLayout::setColumnStretch(int, int)
    QGridLayout::rowCount()
    QGridLayout::rowMinimumHeight(int)
    QGridLayout::rowStretch(int)
    QGridLayout::setRowMinimumHeight(int, int)
    QGridLayout::setRowStretch(int, int)
    
    QGridLayout::setSpacing(int)
    QGridLayout::setHorizontalSpacing(int)
    QGridLayout::setVerticalSpacing(int)
    QGridLayout::spacing()
    QGridLayout::horizontalSpacing()
    QGridLayout::verticalSpacing()	
    

    #   QFrame
	QFrame::ctor(QWidget*, Qt::WindowFlags)
	QFrame::frameRect()
	QFrame::frameShadow()
	QFrame::frameShape()
	QFrame::frameStyle()
	QFrame::frameWidth()
	QFrame::lineWidth()
	QFrame::midLineWidth()
	QFrame::setFrameRect(const QRect&)
	QFrame::setFrameShadow(Shadow)
	QFrame::setFrameShape(Shape)
	QFrame::setFrameStyle(int)
	QFrame::setLineWidth(int)
	QFrame::setMidLineWidth(int)
	QFrame::sizeHint()
	

# There is no suited example or test currently
#
# 	QSizePolicy::controlType()
# 	QSizePolicy::ctor()
# 	QSizePolicy::ctor(Policy, Policy, ControlType)
# 	# QSizePolicy::expandingDirections()
# 	QSizePolicy::hasHeightForWidth()
# 	QSizePolicy::hasWidthForHeight()
# 	QSizePolicy::horizontalPolicy()
# 	QSizePolicy::horizontalStretch()
# 	QSizePolicy::retainSizeWhenHidden()
# 	QSizePolicy::setControlType(ControlType)
# 	QSizePolicy::setHeightForWidth(bool)
# 	QSizePolicy::setHorizontalPolicy(Policy)
# 	QSizePolicy::setHorizontalStretch(int)
# 	QSizePolicy::setRetainSizeWhenHidden(bool)
# 	QSizePolicy::setVerticalPolicy(Policy)
# 	QSizePolicy::setVerticalStretch(int)
# 	QSizePolicy::setWidthForHeight(bool)
# 	QSizePolicy::transpose()
# 	QSizePolicy::transposed()
# 	QSizePolicy::verticalPolicy()
# 	QSizePolicy::verticalStretch()
# 
# # 	QWidget::setSizePolicy(QSizePolicy)
  	QWidget::setSizePolicy(QSizePolicy::Policy, QSizePolicy::Policy)
	

	############################################################
	# TODO:

	#          AbstractSpinBox
	#          SpinBox
    #          ComboBox

    ### ???
    QWidget::hasHeightForWidth()
    QWidget::heightForWidth(int)

#     # ??? Always valid ???
#     QBoxLayout::hasHeightForWidth()
#     QBoxLayout::heightForWidth(int)

