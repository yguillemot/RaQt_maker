
# A tiny text editor

use Qt::QtWidgets;
use Qt::QtWidgets::QApplication;
use Qt::QtWidgets::QCloseEvent;
use Qt::QtWidgets::QFileDialog;
use Qt::QtWidgets::QHBoxLayout;
use Qt::QtWidgets::QMessageBox;
use Qt::QtWidgets::QPushButton;
use Qt::QtWidgets::QTextEdit;
use Qt::QtWidgets::QVBoxLayout;
use Qt::QtWidgets::QWidget;


# The main window
class MainWidget is QWidget
{
    submethod TWEAK { 
        # Initialize parent
        self.QWidget::subClass;
    }
    
    method closeEvent(QCloseEvent $event)
    {
        say "closeEvent !!!";
        # $event.accept;
        $event.ignore;      # Doesn't work !!!
    }
}


# The text editor widget is a subclass of QTextEdit
class TextEdit is QTextEdit {

    has Str $!fileName = "";
    has Bool $!textModified = False;

    submethod TWEAK { 
        # Initialize parent
        self.QTextEdit::subClass;
        
        # Connect signals from parent to local slots
        connect self, "textChanged", self, "textHasBeenModified";
        connect self, "fileLoaded", self, "fileHasBeenLoaded";
    }

    method load is QtSlot
    {
        # If the text has been changed, ask for confirmation
        # and return if confirmation is refused
        return if $!textModified && !self.confirmation;
        
        my Str $fileName = QFileDialog.getOpenFileName(self);
        if $fileName {
            my Str $text = slurp $fileName;
            $!fileName = $fileName;
            self.setPlainText($text);
            self.fileLoaded($fileName);     # Emit signal "fileLoaded" 
        }
    }

    method save is QtSlot
    {
        # Set current file name as default file name
        my Str $fileName = QFileDialog.getSaveFileName(self, "", $!fileName);
        if $fileName {
            my $text = self.toPlainText;
            spurt $fileName, $text if $text;
            
            say "FILE SAVED";
            $!textModified = False;
        }
    }
    
    method textHasBeenModified is QtSlot
    {
        say "TEXT MODIFIED";
        $!textModified = True;
    }
    
    method fileHasBeenLoaded is QtSlot
    {
        say "FILE LOADED";
        $!textModified = False;
    }
    
    method fileLoaded(Str) is QtSignal { ... }
    
    # Display a message box
    # Return True if user's answer is OK
    method confirmation(--> Bool)
    {
        my $mb = QMessageBox.new(self);
        $mb.setText("Modifications are not saved.");
        $mb.setInformativeText("Do you want to continue ?");
        $mb.setStandardButtons(QMessageBox::Ok +| QMessageBox::Cancel);
        my $retVal = $mb.exec;
        say "retVal = ", $retVal;
        
        return $retVal == QMessageBox::Ok;
    }
    
}

# Objects creation
my $qApp = QApplication.new;
my $textEdit = TextEdit.new;
my $quitButton = QPushButton.new('Quit');
my $loadButton = QPushButton.new('Load');
my $saveButton = QPushButton.new('Save');

# Layout
my $buttonLayout = QHBoxLayout.new;
$buttonLayout.addWidget($loadButton);
$buttonLayout.addWidget($saveButton);
$buttonLayout.addWidget($quitButton);

my $layout = QVBoxLayout.new;
$layout.addWidget($textEdit);
$layout.addLayout($buttonLayout);

# main window
my $window = MainWidget.new;
$window.setLayout($layout);
$window.setWindowTitle("A tiny text editor");
$window.show;

# Connect buttons
connect $loadButton, "pressed", $textEdit, "load";
connect $saveButton, "pressed", $textEdit, "save";
connect $quitButton, "clicked", $qApp, "quit";

# Create a connection for writing the file name in the window title
connect $textEdit, "fileLoaded", $window, "setWindowTitle";

# Run the graphical application
my $status = $qApp.exec;
say "Resultat execution = $status";




